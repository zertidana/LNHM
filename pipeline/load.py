"""Load script for inserting minute-by-minute data generated by transform into database."""

import csv
from log import get_logger, set_logger
import pandas as pd
from os import environ as ENV
from dotenv import load_dotenv
import sqlalchemy


def load_data(file_path: str = 'data/normalised_output.csv') -> pd.DataFrame:
    """Loads the unclean data from csv."""
    logger = get_logger()
    if not isinstance(file_path, str):
        logger.critical("Invalid URL type.")
        raise TypeError("Invalid URL type.")
    if file_path[-4:] != ".csv":
        logger.critical("Filename doesn't end in .csv.")
        raise ValueError("Please end your filename in .csv.")
    return pd.read_csv(file_path)


def insert_transformed_data() -> None:
    """Function that calls connect function, and inserts into the Microsoft SQL database
    T-SQL format?"""
    logger = get_logger()

    logger.info("Loading local recent data...")
    transformed_data = load_data()
    logger.info("Successfully loaded recent data!")

    logger.info("Inserting data into database setup...")
    engine = sqlalchemy.create_engine(
        f'mssql+pyodbc://{ENV["DB_USER"]}:{ENV["DB_PASSWORD"]}@{ENV['DB_HOST']}/{ENV['DB_NAME']}?driver={ENV['DB_DRIVER']}',
        connect_args={'connect_timeout': 10, 'TrustServerCertificate': 'yes'},
        echo=False)

    transformed_data.to_sql('FACT_plant_reading',
                            engine, index=False, if_exists='append')

    logger.info("Successfully inserted data!")


if __name__ == "__main__":
    load_dotenv()
    set_logger()
    insert_transformed_data()
