"""Load script for inserting minute-by-minute data generated by transform into database."""

from os import environ as ENV, path
from dotenv import load_dotenv
import sqlalchemy
import pandas as pd
import pyodbc

from utils import get_logger, set_logger, load_csv_to_df


def insert_transformed_data(transformed_data: pd.DataFrame = None) -> pd.DataFrame:
    """Calls the connect function to inserts daily data into Microsoft SQL server database.
    Dataframe that is returned consists of only rows that have errors, for step function"""
    logger = get_logger()

    if transformed_data is None:
        if path.exists('data/normalised_minute_output.csv'):
            logger.info("Loading local recent data...")
            transformed_data = load_csv_to_df(
                'data/normalised_minute_output.csv')
            logger.info("Successfully loaded recent data!")
        else:
            logger.error(
                "No csv file found at path: data/normalised_minute_output.csv, "
                "please run the previous pipeline steps to generate it.")

    logger.info("Inserting data into database setup...")
    try:
        engine = sqlalchemy.create_engine(
            (f"mssql+pyodbc://{ENV['DB_USER']}:{ENV['DB_PASSWORD']}"
             f"@{ENV['DB_HOST']}/{ENV['DB_NAME']}?driver={ENV['DB_DRIVER']}"),
            connect_args={'connect_timeout': 10,
                          'TrustServerCertificate': 'yes'},
            echo=False)
    except pyodbc.DataError as exc:
        logger.critical(exc)
        raise exc

    transformed_data.to_sql('FACT_plant_reading',
                            engine, index=False, if_exists='append')

    logger.info("Successfully inserted data!")

    error_data = transformed_data.loc[
        transformed_data['error_msg'].notna(), ['plant_id', 'error_msg']
    ].copy()
    error_data.rename(columns={'error_msg': 'error'}, inplace=True)
    error_data = error_data.where(pd.notnull(error_data), None)
    return error_data


if __name__ == "__main__":
    load_dotenv()
    set_logger()
    insert_transformed_data()
